<?php

namespace DBundle\Repository;

use DBundle\Entity\Entrant;
use DoctrineExtensions\Query\Mysql\Month;
/**
 * EntrantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntrantRepository extends \Doctrine\ORM\EntityRepository
{

    public function getByNif($thisNif = null)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('entrant')
                    ->from(Entrant::class, 'entrant')
                    ->andWhere('entrant.nif LIKE :thisNif')
                        ->setParameter('thisNif', '%'.$thisNif.'%');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByComment($comment,$month)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $fromTime = new \DateTime('2022' . '-' . $month . '-01');
        $toTime = new \DateTime($fromTime->format('Y-m-d') . ' first day of next month');
        $queryBuilder = $this->createQueryBuilder('p')
            ->Where('p.commentaires LIKE :categorie')            
            ->andWhere('p.createdAt >= :fromTime')
            ->andWhere('p.createdAt < :toTime')
            ->setParameter('categorie', '%' . $comment . '%')
            ->setParameter('fromTime', $fromTime)
            ->setParameter('toTime', $toTime);
       
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByRsoc($thisRsoc = null)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('entrant')
                    ->from(Entrant::class, 'entrant')
                    ->andWhere('entrant.raisonSocial LIKE :thisNif')
                    ->setParameter('thisNif', '%'.$thisRsoc.'%');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByServiceByUser($service = null, $status)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('entrant')
                    ->from(Entrant::class, 'entrant')
        //          ->andWhere('entrant.service = :service')
        //          ->setParameter('service', $service);
                    ->andWhere('entrant.status != :status')
                    ->setParameter('status', $status);
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByGestionnaireByUser($service = null, $status)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('entrant')
                    ->from(Entrant::class, 'entrant')
                    ->andWhere('entrant.gestionnaire = :service')
                    ->setParameter('service', $service)
                    ->andWhere('entrant.status != :status')
                    ->setParameter('status', $status);
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function removeGestionnaire($user_id, $entrant_id){
        $conn = $this->getEntityManager()->getConnection();        
        $sql = "DELETE FROM `user_entrant` WHERE entrant_id = " . $entrant_id . " AND user_id = " . $user_id ." ";
        $stmt = $conn->prepare($sql);
        return $stmt->execute();
    }

    public function removeServiceEntrant($serviceId, $entrant_id)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "DELETE FROM `service_entrant` WHERE entrant_id = " . $entrant_id . " AND service_id = " . $serviceId ." ";
        $stmt = $conn->prepare($sql);
        return $stmt->execute();
    }

    public function getBetweenDates($month)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $fromDate = new \DateTime('2022' . '-' . $month . '-01');
        $toDate = new \DateTime($fromDate->format('Y-m-d') . ' first day of NEXT month');
        $queryBuilder = $this->createQueryBuilder('p')
            ->Where('p.createdAt >= :fromDate')
            ->andWhere('p.createdAt < :toDate')
            ->setParameter('fromDate', $fromDate)
            ->setParameter('toDate', $toDate);
       
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function findByCategorie($entrantQuery, $thisCategorie)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('entrant')
                    ->from(Entrant::class, 'entrant')
                    ->Where('entrant.service', $entrantQuery)
                    ->andWhere('entrant.commentaires LIKE :thisCateg')
                    ->setParameter('thisCateg', '%'.$thisCategorie.'%')
                    ->orderBy('entrant.numeroCourrier', 'DESC');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

}
