<?php

namespace DBundle\Repository;

use DBundle\Entity\Sortant;
use DoctrineExtensions\Query\Mysql\Month;
/**
 * SortantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SortantRepository extends \Doctrine\ORM\EntityRepository
{

    public function getByNif($thisNif = null)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('sortant')
                    ->from(Sortant::class, 'sortant')
                    ->andWhere('sortant.nif LIKE :thisNif')
                        ->setParameter('thisNif', '%'.$thisNif.'%');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByComment($comment,$month)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $fromTime = new \DateTime('2022' . '-' . $month . '-01');
        $toTime = new \DateTime($fromTime->format('Y-m-d') . ' first day of next month');
        $queryBuilder = $this->createQueryBuilder('p')
            ->Where('p.titre LIKE :categorie')            
            ->andWhere('p.createdAt >= :fromTime')
            ->andWhere('p.createdAt < :toTime')
            ->setParameter('categorie', '%' . $comment . '%')
            ->setParameter('fromTime', $fromTime)
            ->setParameter('toTime', $toTime);
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByRsoc($thisRsoc = null)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('sortant')
                    ->from(Sortant::class, 'sortant')
                    ->andWhere('sortant.raisonSocial LIKE :thisNif')
                    ->setParameter('thisNif', '%'.$thisRsoc.'%');
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByServiceByUser($service = null, $status)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('sortant')
                    ->from(Sortant::class, 'sortant')
        //          ->andWhere('sortant.service = :service')
        //          ->setParameter('service', $service);
                    ->andWhere('sortant.status != :status')
                    ->setParameter('status', $status);
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function getByGestionnaireByUser($service = null, $status)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('sortant')
                    ->from(Sortant::class, 'sortant')
                    ->andWhere('sortant.gestionnaire = :service')
                    ->setParameter('service', $service)
                    ->andWhere('sortant.status != :status')
                    ->setParameter('status', $status);
        $query = $queryBuilder->getQuery();
        return $query->getResult();
    }

    public function removeGestionnaire($user_id, $sortant_id){
        $conn = $this->getEntityManager()->getConnection();        
        $sql = "DELETE FROM `user_sortant` WHERE sortant_id = " . $sortant_id . " AND user_id = " . $user_id ." ";
        $stmt = $conn->prepare($sql);
        return $stmt->execute();
    }

    public function removeServiceSortant($serviceId, $sortant_id)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "DELETE FROM `service_sortant` WHERE sortant_id = " . $sortant_id . " AND service_id = " . $serviceId ." ";
        $stmt = $conn->prepare($sql);
        return $stmt->execute();
    }
    
}
